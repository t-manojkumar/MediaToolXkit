# Name of your workflow
name: Build and Release MediaToolXkit

# Controls when the workflow will run
on:
  # Triggers the workflow when a new tag is pushed (e.g., v1.0.1)
  push:
    tags:
      - 'v*.*.*'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-and-release:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # 1. Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Sets up MSBuild, required for building a Windows App SDK project
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1

      # 3. Sets up NuGet for restoring dependencies
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1

      # 4. Restores all NuGet packages
      - name: Restore NuGet packages
        run: nuget restore MediaToolXkit.sln

      # 5. Builds the application for all architectures and creates the MSIX packages
      - name: Build MSIX Packages
        run: |
          msbuild MediaToolXkit.sln /p:Configuration=Release /p:Platform=x86 /p:AppxPackageDir="./AppPackages/"
          msbuild MediaToolXkit.sln /p:Configuration=Release /p:Platform=x64 /p:AppxPackageDir="./AppPackages/"
          msbuild MediaToolXkit.sln /p:Configuration=Release /p:Platform=ARM64 /p:AppxPackageDir="./AppPackages/"
        
      # 6. Creates a new GitHub Release and uploads the MSIX packages as assets
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          # This tells the action to use the tag that triggered the workflow as the release name
          tag_name: ${{ github.ref }}
          # This is the title of the release
          name: Release ${{ github.ref_name }}
          # This will upload all .msix files from the AppPackages folder
          files: ./AppPackages/*.msix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
